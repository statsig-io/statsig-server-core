/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class DynamicConfig {
  name: string
  value: Record<string, any>
  ruleID: string
  idType: string
  details: EvaluationDetails
  getValue(param_name: string, fallback: boolean | number | string | object | Array<any> | null): any
  getRuleId(): string
  getIdType(): string
  getEvaluationDetails(): EvaluationDetails
  getSecondaryExposures(): Array<SecondaryExposure> | null
  toJSON(): Record<string, any>
}

export declare class Experiment {
  name: string
  value: Record<string, any>
  ruleID: string
  idType: string
  groupName?: string
  details: EvaluationDetails
  getValue(param_name: string, fallback: boolean | number | string | object | Array<any> | null): any
  getRuleId(): string
  getIdType(): string
  getGroupName(): string | null
  getEvaluationDetails(): EvaluationDetails
  getSecondaryExposures(): Array<SecondaryExposure> | null
  toJSON(): Record<string, any>
}

export declare class Layer {
  name: string
  ruleID: string
  groupName?: string
  allocatedExperimentName?: string
  value: Record<string, any>
  details: EvaluationDetails
  getValue(param_name: string, fallback: boolean | number | string | object | Array<any> | null): any
  getRuleId(): string
  getGroupName(): string | null
  getEvaluationDetails(): EvaluationDetails
  getSecondaryExposures(): Array<SecondaryExposure> | null
  toJSON(): Record<string, any>
}

export declare class ParameterStore {
  name: string
  getValue<T>(paramName: string, fallback?: T): T
  getEvaluationDetails(): EvaluationDetails
}

export declare class StatsigNapiInternal {
  subscribe(eventName: '*' | 'gate_evaluated' | 'dynamic_config_evaluated' | 'experiment_evaluated' | 'layer_evaluated', callback: (event: any) => void): string
  unsubscribe(eventName: '*' | 'gate_evaluated' | 'dynamic_config_evaluated' | 'experiment_evaluated' | 'layer_evaluated'): void
  unsubscribeById(subscriptionId: string): void
  unsubscribeAll(): void
  constructor(networkFunc: unknown, sdkKey: string, options?: StatsigOptions | undefined | null)
  initialize(): Promise<StatsigResult>
  shutdown(timeoutMs?: number | undefined | null): Promise<StatsigResult>
  flushEvents(): Promise<StatsigResult>
  logEvent(user: StatsigUser, eventName: string, value?: string | number | null, metadata?: Record<string, string> | undefined | null): void
  forwardLogLineEvent(user: StatsigUser, logLevel: 'trace' | 'debug' |'log' | 'info' | 'warn' | 'error', value?: string | undefined | null, metadata?: Record<string, string> | undefined | null): void
  checkGate(user: StatsigUser, gateName: string, options?: FeatureGateEvaluationOptions | undefined | null): boolean
  getFeatureGate(user: StatsigUser, featureName: string, options?: FeatureGateEvaluationOptions | undefined | null): FeatureGate
  getFieldsNeededForGate(gateName: string): Array<string>
  getDynamicConfig(user: StatsigUser, configName: string, options?: DynamicConfigEvaluationOptions | undefined | null): DynamicConfig
  getFieldsNeededForDynamicConfig(configName: string): Array<string>
  getExperiment(user: StatsigUser, experimentName: string, options?: ExperimentEvaluationOptions | undefined | null): Experiment
  getExperimentByGroupName(experimentName: string, groupName: string): Experiment
  getFieldsNeededForExperiment(experimentName: string): Array<string>
  getLayer(user: StatsigUser, layerName: string, options?: LayerEvaluationOptions | undefined | null): Layer
  getPrompt(user: StatsigUser, promptName: string, options?: LayerEvaluationOptions | undefined | null): Layer
  getFieldsNeededForLayer(layerName: string): Array<string>
  identify(user: StatsigUser): void
  getParameterStore(user: StatsigUser, parameterStoreName: string, options?: ParameterStoreEvaluationOptions | undefined | null): ParameterStore
  getClientInitializeResponse(user: StatsigUser, options?: ClientInitResponseOptions | undefined | null): string
  manuallyLogFeatureGateExposure(user: StatsigUser, gateName: string): void
  manuallyLogDynamicConfigExposure(user: StatsigUser, configName: string): void
  manuallyLogExperimentExposure(user: StatsigUser, experimentName: string): void
  manuallyLogLayerParamExposure(user: StatsigUser, layerName: string, paramName: string): void
  overrideGate(gateName: string, value: boolean, id?: string | undefined | null): void
  overrideDynamicConfig(configName: string, value: Record<string, any>, id?: string | undefined | null): void
  overrideExperiment(experimentName: string, value: Record<string, any>, id?: string | undefined | null): void
  overrideExperimentByGroupName(experimentName: string, groupName: string, id?: string | undefined | null): void
  overrideLayer(layerName: string, value: Record<string, any>, id?: string | undefined | null): void
  removeGateOverride(gateName: string, id?: string | undefined | null): void
  removeDynamicConfigOverride(configName: string, id?: string | undefined | null): void
  removeExperimentOverride(experimentName: string, id?: string | undefined | null): void
  removeLayerOverride(layerName: string, id?: string | undefined | null): void
  removeAllOverrides(): void
  getFeatureGateList(): Array<string>
  getDynamicConfigList(): Array<string>
  getExperimentList(): Array<string>
  getParameterStoreList(): Array<string>
  getParsedUserAgentValueForUser(user: StatsigUser): Record<string, string | undefined | null> | null
}

export declare class StatsigUser {
  constructor(args: ({userID: string} | {customIDs: Record<string, string> }) & StatsigUserArgs)
  static withUserID(userId: string): StatsigUser
  static withCustomIDs(customIds: Record<string, string>): StatsigUser
  get customIDs(): Record<string, string> | null
  set customIDs(value: Record<string, string> | null)
  get custom(): Record<string, string> | null
  set custom(value: Record<string, string | number | boolean | Array<string | number | boolean>> | null)
  get privateAttributes(): Record<string, string> | null
  set privateAttributes(value: Record<string, string | number | boolean | Array<string | number | boolean>> | null)
  get userID(): string | null
  set userID(value: any)
  get email(): string | null
  set email(value: any)
  get ip(): string | null
  set ip(value: any)
  get userAgent(): string | null
  set userAgent(value: any)
  get country(): string | null
  set country(value: any)
  get locale(): string | null
  set locale(value: any)
  get appVersion(): string | null
  set appVersion(value: any)
  toJSON(): string
}

export declare function __internal__testDataStore(store: DataStore, path: string, value: string): Promise<[DataStoreResponse | undefined | null, boolean]>

export declare function __internal__testObservabilityClient(client: ObservabilityClient, action: string, metricName: string, value: number, tags?: Record<string, string> | undefined | null): Promise<void>

export declare function __internal__testOutputLogger(logger: OutputLoggerProvider, action: string, tag?: string | undefined | null, message?: string | undefined | null): Promise<void>

export declare function __internal__testPersistentStorage(store: PersistentStorage, action: string, key?: string | undefined | null, configName?: string | undefined | null, data?: any | undefined | null): Promise<Record<string, string> | null>

export interface ClientInitResponseOptions {
  hashAlgorithm?: string
  clientSdkKey?: string
  includeLocalOverrides?: boolean
  featureGateFilter?: Set<string>
  experimentFilter?: Set<string>
  dynamicConfigFilter?: Set<string>
  layerFilter?: Set<string>
  paramStoreFilter?: Set<string>
  removeIdType?: boolean
  removeDefaultValueGates?: boolean
}

export interface DataStore {
  initialize?: () => Promise<void>
  shutdown?: () => Promise<void>
  get?: (key: string) => Promise<DataStoreResponse>
  set?: (key: string, value: string, time?: number) => Promise<void>
  supportPollingUpdatesFor?: (key: string) => Promise<boolean>
}

export interface DataStoreResponse {
  result?: string
  time?: number
}

export interface DynamicConfigEvaluationOptions {
  disableExposureLogging?: boolean
}

export interface EvaluationDetails {
  reason: string
  lcut?: number
  receivedAt?: number
}

export interface ExperimentEvaluationOptions {
  disableExposureLogging?: boolean
  userPersistedValues?: Record<string, any>
}

export interface FeatureGate {
  name: string
  value: boolean
  ruleID: string
  idType: string
  details: EvaluationDetails
}

export interface FeatureGateEvaluationOptions {
  disableExposureLogging?: boolean
}

export interface LayerEvaluationOptions {
  disableExposureLogging?: boolean
  userPersistedValues?: Record<string, any>
}

export interface NapiNetworkFuncResult {
  status: number
  data?: Array<number>
  error?: string
}

export interface ObservabilityClient {
  initialize?: () => void
  increment?: (metricName: string, value: number, tags: Record<string, string>) => void
  gauge?: (metricName: string, value: number, tags: Record<string, string>) => void
  dist?: (metricName: string, value: number, tags: Record<string, string>) => void
  error?: (tag: string, error: string) => void
}

export interface OutputLoggerProvider {
  initialize?: () => void
  debug?: (tag: string, message: string) => void
  info?: (tag: string, message: string) => void
  warn?: (tag: string, message: string) => void
  error?: (tag: string, message: string) => void
  shutdown?: () => void
}

export interface OverrideAdapterConfig {
  adapterType: OverrideAdapterType
}

export declare const enum OverrideAdapterType {
  LocalOverride = 0
}

export interface ParameterStoreEvaluationOptions {
  disableExposureLogging?: boolean
}

export interface PersistentStorage {
  load: (key: string) => UserPersistedValues | null
  save: (key: string, config_name: string, data: StickyValues) => void
  delete: (key: string, config_name: string) => void
}

export interface ProxyConfig {
  proxyHost?: string
  proxyPort?: number
  proxyAuth?: string
  proxyProtocol?: string
}

export interface SecondaryExposure {
  gate: string
  gateValue: string
  ruleId: string
}

export interface SpecAdapterConfig {
  adapterType: 'data_store' | 'network_grpc_websocket' | 'network_http'
  specsUrl?: string
  initTimeoutMs: number
  authenticationMode?: 'none' | 'tls' | 'mtls' | undefined | null
  caCertPath?: string
  clientCertPath?: string
  clientKeyPath?: string
  domainName?: string
}

export interface StatsigOptions {
  dataStore?: DataStore
  disableAllLogging?: boolean
  disableCountryLookup?: boolean
  disableNetwork?: boolean
  enableIdLists?: boolean
  environment?: string
  eventLoggingFlushIntervalMs?: number
  eventLoggingMaxQueueSize?: number
  fallbackToStatsigApi?: boolean
  globalCustomFields?: Record<string, string | number | boolean | Array<string | number | boolean>>
  idListsSyncIntervalMs?: number
  idListsUrl?: string
  initTimeoutMs?: number
  logEventUrl?: string
  observabilityClient?: ObservabilityClient
  outputLogLevel?: 'none' | 'debug' | 'info' | 'warn' | 'error'
  outputLoggerProvider?: OutputLoggerProvider
  configCompressionMode?: 'gzip' | 'dictionary'
  overrideAdapterConfig?: Array<OverrideAdapterConfig>
  serviceName?: string
  persistentStorage?: PersistentStorage
  specAdaptersConfig?: Array<SpecAdapterConfig>
  specsSyncIntervalMs?: number
  specsUrl?: string
  waitForCountryLookupInit?: boolean
  waitForUserAgentInit?: boolean
  proxyConfig?: ProxyConfig
  useThirdPartyUaParser?: boolean
}

export interface StatsigResult {
  isSuccess: boolean
  error?: string
}

export interface StatsigUserArgs {
  userID?: string
  customIDs?: Record<string, string>
  email?: string
  ip?: string
  userAgent?: string
  country?: string
  locale?: string
  appVersion?: string
  custom?: Record<string, string | number | boolean | Array<string | number | boolean> | null | Record<string, unknown>>
  privateAttributes?: Record<string, string | number | boolean | Array<string | number | boolean> | null | Record<string, unknown>>
}
// ---- Manually defined typing section ----- 

export type StickyValues = {
  value: boolean;
  json_value: Record<string, unknown>;
  rule_id: string;
  group_name: string | null;
  secondary_exposures: SecondaryExposure[];
  undelegated_secondary_exposures: SecondaryExposure[];
  config_delegate: string | null;
  explicit_parameters: string[] | null;
  time: number;
  configVersion?: number | undefined;
};

export type UserPersistedValues = Record<string, StickyValues>;

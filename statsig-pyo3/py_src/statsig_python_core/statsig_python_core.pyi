# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class DataStoreBase:
    def __new__(cls,): ...
    ...

class DynamicConfig:
    name: builtins.str
    rule_id: builtins.str
    id_type: builtins.str
    value: typing.Any
    details: EvaluationDetails
    def get_bool(self, param_name:builtins.str, fallback:builtins.bool) -> builtins.bool:
        ...

    def get_float(self, param_name:builtins.str, fallback:builtins.float) -> builtins.float:
        ...

    def get_integer(self, param_name:builtins.str, fallback:builtins.int) -> builtins.int:
        ...

    def get_string(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_array_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_object_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...


class DynamicConfigEvaluationOptions:
    disable_exposure_logging: builtins.bool
    def __new__(cls,disable_exposure_logging:builtins.bool=False): ...

class EvaluationDetails:
    reason: builtins.str
    lcut: typing.Optional[builtins.int]
    received_at: typing.Optional[builtins.int]

class Experiment:
    name: builtins.str
    rule_id: builtins.str
    id_type: builtins.str
    group_name: typing.Optional[builtins.str]
    value: typing.Any
    details: EvaluationDetails
    def get_bool(self, param_name:builtins.str, fallback:builtins.bool) -> builtins.bool:
        ...

    def get_float(self, param_name:builtins.str, fallback:builtins.float) -> builtins.float:
        ...

    def get_integer(self, param_name:builtins.str, fallback:builtins.int) -> builtins.int:
        ...

    def get_string(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_array_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_object_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...


class ExperimentEvaluationOptions:
    disable_exposure_logging: builtins.bool
    user_persisted_values: typing.Optional[dict]
    def __new__(cls,disable_exposure_logging:builtins.bool=False, user_persisted_values:typing.Optional[dict]=None): ...

class FailureDetails:
    reason: builtins.str
    error: typing.Optional[builtins.str]

class FeatureGate:
    name: builtins.str
    value: builtins.bool
    rule_id: builtins.str
    id_type: builtins.str
    details: EvaluationDetails

class FeatureGateEvaluationOptions:
    disable_exposure_logging: builtins.bool
    def __new__(cls,disable_exposure_logging:builtins.bool=False): ...

class InitializeDetails:
    duration: builtins.float
    init_success: builtins.bool
    is_config_spec_ready: builtins.bool
    is_id_list_ready: typing.Optional[builtins.bool]
    source: builtins.str
    failure_details: typing.Optional[FailureDetails]

class Layer:
    name: builtins.str
    rule_id: builtins.str
    group_name: typing.Optional[builtins.str]
    allocated_experiment_name: typing.Optional[builtins.str]
    value: typing.Any
    details: EvaluationDetails
    def get_bool(self, param_name:builtins.str, fallback:builtins.bool) -> builtins.bool:
        ...

    def get_float(self, param_name:builtins.str, fallback:builtins.float) -> builtins.float:
        ...

    def get_integer(self, param_name:builtins.str, fallback:builtins.int) -> builtins.int:
        ...

    def get_string(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_array_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...

    def get_object_json(self, param_name:builtins.str, fallback:builtins.str) -> builtins.str:
        ...


class LayerEvaluationOptions:
    disable_exposure_logging: builtins.bool
    user_persisted_values: typing.Optional[dict]
    def __new__(cls,disable_exposure_logging:builtins.bool=False, user_persisted_values:typing.Optional[dict]=None): ...

class ObservabilityClientBase:
    def __new__(cls,): ...
    ...

class OutputLoggerProviderBase:
    def __new__(cls,): ...
    ...

class ParameterStore:
    name: builtins.str
    def get_string(self, param_name:builtins.str, fallback:builtins.str) -> typing.Optional[builtins.str]:
        ...

    def get_float(self, param_name:builtins.str, fallback:builtins.float) -> typing.Optional[builtins.float]:
        ...

    def get_integer(self, param_name:builtins.str, fallback:builtins.int) -> typing.Optional[builtins.int]:
        ...

    def get_bool(self, param_name:builtins.str, fallback:builtins.bool) -> typing.Optional[builtins.bool]:
        ...

    def get_array(self, param_name:builtins.str, fallback:list) -> typing.Optional[typing.Any]:
        ...

    def get_map(self, param_name:builtins.str, fallback:dict) -> typing.Optional[typing.Any]:
        ...


class ParameterStoreEvaluationOptions:
    disable_exposure_logging: builtins.bool
    def __new__(cls,disable_exposure_logging:builtins.bool=False): ...

class PersistentStorageBaseClass:
    def __new__(cls,): ...
    ...

class ProxyConfig:
    proxy_host: typing.Optional[builtins.str]
    proxy_port: typing.Optional[builtins.int]
    proxy_auth: typing.Optional[builtins.str]
    proxy_protocol: typing.Optional[builtins.str]
    def __new__(cls,proxy_host:typing.Optional[builtins.str]=None, proxy_port:typing.Optional[builtins.int]=None, proxy_auth:typing.Optional[builtins.str]=None, proxy_protocol:typing.Optional[builtins.str]=None): ...

class SpecAdapterConfig:
    adapter_type: builtins.str
    specs_url: typing.Optional[builtins.str]
    init_timeout_ms: typing.Optional[builtins.int]

class StatsigBasePy:
    def __new__(cls,sdk_key:builtins.str, options:typing.Optional[StatsigOptions]=None): ...
    def initialize(self) -> typing.Any:
        ...

    def initialize_with_details(self) -> typing.Any:
        ...

    def get_initialize_details(self) -> InitializeDetails:
        ...

    def is_initialized(self) -> builtins.bool:
        ...

    def flush_events(self) -> typing.Any:
        ...

    def shutdown(self) -> typing.Any:
        ...

    def log_event(self, user:StatsigUser, event_name:builtins.str, value:typing.Optional[typing.Any]=None, metadata:typing.Optional[dict]=None) -> None:
        ...

    def check_gate(self, user:StatsigUser, name:builtins.str, options:typing.Optional[FeatureGateEvaluationOptions]=None) -> builtins.bool:
        ...

    def get_feature_gate(self, user:StatsigUser, name:builtins.str, options:typing.Optional[FeatureGateEvaluationOptions]=None) -> FeatureGate:
        ...

    def manually_log_gate_exposure(self, user:StatsigUser, name:builtins.str) -> None:
        ...

    def get_dynamic_config(self, user:StatsigUser, name:builtins.str, options:typing.Optional[DynamicConfigEvaluationOptions]=None) -> DynamicConfig:
        ...

    def manually_log_dynamic_config_exposure(self, user:StatsigUser, name:builtins.str) -> None:
        ...

    def get_experiment(self, user:StatsigUser, name:builtins.str, options:typing.Optional[ExperimentEvaluationOptions]=None) -> Experiment:
        ...

    def manually_log_experiment_exposure(self, user:StatsigUser, name:builtins.str) -> None:
        ...

    def get_layer(self, user:StatsigUser, name:builtins.str, options:typing.Optional[LayerEvaluationOptions]=None) -> Layer:
        ...

    def get_prompt(self, user:StatsigUser, name:builtins.str, options:typing.Optional[LayerEvaluationOptions]=None) -> Layer:
        ...

    def manually_log_layer_parameter_exposure(self, user:StatsigUser, name:builtins.str, param_name:builtins.str) -> None:
        ...

    def get_parameter_store(self, user:StatsigUser, name:builtins.str, options:typing.Optional[ParameterStoreEvaluationOptions]=None) -> ParameterStore:
        ...

    def get_client_initialize_response(self, user:StatsigUser, hash:typing.Optional[builtins.str]=None, client_sdk_key:typing.Optional[builtins.str]=None, include_local_overrides:typing.Optional[builtins.bool]=None) -> builtins.str:
        ...

    def override_gate(self, gate_name:builtins.str, value:builtins.bool, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def override_dynamic_config(self, config_name:builtins.str, value:dict, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def override_experiment(self, experiment_name:builtins.str, value:dict, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def override_layer(self, layer_name:builtins.str, value:dict, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def override_experiment_by_group_name(self, experiment_name:builtins.str, group_name:builtins.str, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def remove_gate_override(self, gate_name:builtins.str, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def remove_dynamic_config_override(self, config_name:builtins.str, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def remove_experiment_override(self, experiment_name:builtins.str, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def remove_layer_override(self, layer_name:builtins.str, id:typing.Optional[builtins.str]=None) -> None:
        ...

    def remove_all_overrides(self) -> None:
        ...

    def get_feature_gate_list(self) -> builtins.list[builtins.str]:
        ...

    def get_dynamic_config_list(self) -> builtins.list[builtins.str]:
        ...

    def get_experiment_list(self) -> builtins.list[builtins.str]:
        ...

    def get_parameter_store_list(self) -> builtins.list[builtins.str]:
        ...

    def identify(self, user:StatsigUser) -> None:
        ...


class StatsigOptions:
    specs_url: typing.Optional[builtins.str]
    specs_sync_interval_ms: typing.Optional[builtins.int]
    init_timeout_ms: typing.Optional[builtins.int]
    log_event_url: typing.Optional[builtins.str]
    disable_all_logging: typing.Optional[builtins.bool]
    disable_network: typing.Optional[builtins.bool]
    event_logging_flush_interval_ms: typing.Optional[builtins.int]
    event_logging_max_queue_size: typing.Optional[builtins.int]
    event_logging_max_pending_batch_queue_size: typing.Optional[builtins.int]
    enable_id_lists: typing.Optional[builtins.bool]
    wait_for_user_agent_init: typing.Optional[builtins.bool]
    wait_for_country_lookup_init: typing.Optional[builtins.bool]
    disable_country_lookup: typing.Optional[builtins.bool]
    id_lists_url: typing.Optional[builtins.str]
    id_lists_sync_interval_ms: typing.Optional[builtins.int]
    fallback_to_statsig_api: typing.Optional[builtins.bool]
    environment: typing.Optional[builtins.str]
    output_log_level: typing.Optional[builtins.str]
    global_custom_fields: typing.Optional[builtins.dict[builtins.str, typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]
    observability_client: typing.Optional[ObservabilityClientBase]
    output_logger_provider: typing.Optional[OutputLoggerProviderBase]
    data_store: typing.Optional[DataStoreBase]
    persistent_storage: typing.Optional[PersistentStorageBaseClass]
    config_compression_mode: typing.Optional[builtins.str]
    proxy_config: typing.Optional[ProxyConfig]
    spec_adapter_configs: typing.Optional[list]
    use_third_party_ua_parser: typing.Optional[builtins.bool]
    def __new__(cls,specs_url:typing.Optional[builtins.str]=None, specs_sync_interval_ms:typing.Optional[builtins.int]=None, init_timeout_ms:typing.Optional[builtins.int]=None, log_event_url:typing.Optional[builtins.str]=None, disable_all_logging:typing.Optional[builtins.bool]=None, disable_network:typing.Optional[builtins.bool]=None, event_logging_flush_interval_ms:typing.Optional[builtins.int]=None, event_logging_max_queue_size:typing.Optional[builtins.int]=None, event_logging_max_pending_batch_queue_size:typing.Optional[builtins.int]=None, enable_id_lists:typing.Optional[builtins.bool]=None, wait_for_user_agent_init:typing.Optional[builtins.bool]=None, wait_for_country_lookup_init:typing.Optional[builtins.bool]=None, disable_country_lookup:typing.Optional[builtins.bool]=None, id_lists_url:typing.Optional[builtins.str]=None, id_lists_sync_interval_ms:typing.Optional[builtins.int]=None, fallback_to_statsig_api:typing.Optional[builtins.bool]=None, environment:typing.Optional[builtins.str]=None, output_log_level:typing.Optional[builtins.str]=None, global_custom_fields:typing.Optional[typing.Mapping[builtins.str, typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]=None, observability_client:typing.Optional[ObservabilityClientBase]=None, data_store:typing.Optional[DataStoreBase]=None, persistent_storage:typing.Optional[PersistentStorageBaseClass]=None, config_compression_mode:typing.Optional[builtins.str]=None, proxy_config:typing.Optional[ProxyConfig]=None, output_logger_provider:typing.Optional[OutputLoggerProviderBase]=None, spec_adapter_configs:typing.Optional[list]=None, use_third_party_ua_parser:typing.Optional[builtins.bool]=None): ...

class StatsigUser:
    user_id: builtins.str
    email: typing.Optional[builtins.str]
    ip: typing.Optional[builtins.str]
    country: typing.Optional[builtins.str]
    locale: typing.Optional[builtins.str]
    app_version: typing.Optional[builtins.str]
    user_agent: typing.Optional[builtins.str]
    custom_ids: typing.Optional[builtins.dict[builtins.str, builtins.str]]
    custom: typing.Optional[builtins.dict[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]
    private_attributes: typing.Optional[builtins.dict[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]
    def __new__(cls,user_id:typing.Optional[builtins.str]=None, email:typing.Optional[builtins.str]=None, ip:typing.Optional[builtins.str]=None, country:typing.Optional[builtins.str]=None, locale:typing.Optional[builtins.str]=None, app_version:typing.Optional[builtins.str]=None, user_agent:typing.Optional[builtins.str]=None, custom:typing.Optional[typing.Mapping[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]=None, custom_ids:typing.Optional[typing.Mapping[builtins.str, typing.Union[builtins.str, builtins.int, builtins.float]]]=None, private_attributes:typing.Optional[typing.Mapping[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]=None): ...
    def set_user_id(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_email(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_ip(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_country(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_locale(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_app_version(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_user_agent(self, value:typing.Optional[builtins.str]) -> None:
        ...

    def set_custom_ids(self, value:typing.Optional[typing.Mapping[builtins.str, typing.Union[builtins.str, builtins.int, builtins.float]]]) -> None:
        ...

    def set_custom(self, value:typing.Optional[typing.Mapping[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]) -> None:
        ...

    def set_private_attributes(self, value:typing.Optional[typing.Mapping[builtins.str, typing.Optional[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool, typing.List[typing.Union[builtins.str, builtins.int, builtins.float, builtins.bool]]]]]]) -> None:
        ...

    def __getstate__(self) -> bytes:
        ...

    def __setstate__(self, state:bytes) -> None:
        ...


def notify_python_fork() -> None:
    ...

def notify_python_shutdown() -> None:
    ...


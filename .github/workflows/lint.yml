name: Lint

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

jobs:
  # ------------------------------------------------------------ [ Clippy ]
  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run clippy
        run: |
          cargo clippy --version
          cargo clippy --workspace --all-features --tests -- -D warnings

  # ------------------------------------------------------------ [ Rust Format ]
  rust-format:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Rust Format
        run: cargo fmt --all --check

  # ------------------------------------------------------------ [ PHP Code Sniffer ]
  php-code-sniffer:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run Composer Lint
        env:
          SKIP_STATSIG_POST_INSTALL: true
        run: |
          cd statsig-php
          composer install
          composer run-script lint

  # ------------------------------------------------------------ [ Pyo3 Stub Gen ]
  pyo3-stub-gen:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive


      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: 'Install Protoc'
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run pyo3 stub gen
        run: |
          cargo run --bin stub_gen --package statsig-pyo3
          if [[ $(git status --porcelain) ]]; then
            echo "Git diff showing changes:"
            git diff | tee /dev/stdout
            echo "------------------------------"
            echo "Python stub gen has changes!"
            echo "Please run './tore build python' locally and commit the changes."
            echo "------------------------------"
            exit 1
          fi

  # ------------------------------------------------------------ [ Java Spotless Check ]
  java-spotless-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Java Spotless Check
        working-directory: statsig-java
        run: ./gradlew spotlessCheck

  # ------------------------------------------------------------ [ .NET Format Check ]
  dotnet-format-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore Dependencies
        working-directory: statsig-dotnet
        run: dotnet restore -p:UseLocalProjects=true -r linux-x64
      
      - name: Run dotnet format check
        working-directory: statsig-dotnet
        run: dotnet format --verify-no-changes --severity info --no-restore
  
  # ------------------------------------------------------------ [ Go Format Check ]
  # go-format-check: 
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Set up Go SDK
  #       uses: actions/setup-go@v3
  #       with: 
  #         go-version: 1.22
        
  #     - name: Run Go Format Check 
  #       uses: golangci/golangci-lint-action@v6
  #       with: 
  #         version: latest
  #         working-directory: statsig-go
  #         args: --config=.golangci-lint.yml --skip-dirs=benchmark-tests
  #       env: 
  #         CGO_ENABLED: 1

  # ------------------------------------------------------------ [ Elixir Format Check ]
  elixir-format-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: erlef/setup-beam@v1
        with:
          otp-version: '27'
          elixir-version: '1.18'

      - name: Run Mix Format Check
        run: |
          cd statsig-elixir
          mix format --check-formatted
name: Build

on:
  workflow_call:

env:
  # Planning Inputs
  IS_PRIVATE_REPO: ${{ github.event.repository.private }}
  IS_RELEASE_BRANCH: ${{ contains(github.ref, 'heads/releases') }}
  IS_RELEASE_TRIGGER: ${{ github.event_name == 'release' }}
  IS_BETA_BRANCH: ${{ contains(github.ref, 'heads/betas') }}
  IS_MERGED_PR: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
  IS_NEW_RELEASE: ${{ github.event_name == 'release' }}
  IS_MAIN_BRANCH: ${{ github.ref_name == 'main' }}

  # Python Publishing
  MATURIN_PYPI_TOKEN: ${{ secrets.STATSIG_PYPI_PROD_TOKEN }}
  MATURIN_REPOSITORY: pypi

  # NPM Publishing
  NPM_TOKEN: ${{ secrets.SIGSTAT_PUBLISH_NPM }}

  # Java Publishing
  ORG_GRADLE_PROJECT_MAVEN_USERNAME: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_USERNAME }}
  ORG_GRADLE_PROJECT_MAVEN_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_PASSWORD }}
  ORG_GRADLE_PROJECT_SIGNING_KEY_ID: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_SIGNING_KEY: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_SIGNING_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_PASSWORD }}

  # Dotnet Publishing
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  # Elixir Publishing
  HEX_API_KEY: ${{ secrets.STATSIG_ELIXIR_HEX_API_KEY }}

  # GH Octokit (Kong App)
  GH_APP_ID: '229901'
  GH_APP_INSTALLATION_ID: '36921303'
  GH_APP_PRIVATE_KEY: ${{ secrets.KONG_APP_KEY_V2 }}

  # Misc
  CARGO_TERM_COLOR: always
  FORCE_COLOR: true
  OPENSSL_PRIVATE_KEY: ${{ secrets.OPENSSL_PRIVATE_KEY }}

jobs:
  # -------------------------------------------------------------------- [Plan]

  plan:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.plan.outputs.build_matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Make Plan
        id: plan
        run: python3 .github/build_plan.py

  # -------------------------------------------------------------------- [Build]

  build:
    needs: plan

    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.plan.outputs.build_matrix).config }}
        package:
          - node
          - python
          - ffi
          - java
          - dotnet
          - elixir

    timeout-minutes: 25
    runs-on: ${{ (contains(fromJson('["java", "dotnet", "ffi"]'), matrix.package) && contains(matrix.config.target, 'linux')) && 'ubuntu-latest' || matrix.config.runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/common-setup

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.target }}-${{ matrix.package }}

      - name: '[Non-Linux] Install Protoc'
        uses: arduino/setup-protoc@v3
        if: ${{ runner.os != 'Linux' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: '[Non-Linux] Install Dependencies'
        if: ${{ runner.os != 'Linux' }}
        run: |
          pip3 install maturin types-requests ${{ format('{0}', matrix.config.py_deps_suffix) }}
          rustup target add ${{ matrix.config.target }}

      - name: '[Windows Only] Setup Python'
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.config.py_arch }}

      - name: '[Linux Only] Build Docker Image'
        if: ${{ runner.os == 'Linux' }}
        uses: ./.github/actions/build-server-core-docker-image
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_TOKEN }}
          gh_token: ${{ secrets.KONG_FINE_GRAINED_REPO_PAT }}
          dockerfile_path: cli/src/docker/Dockerfile.${{ matrix.config.os }}
          docker_image_tag: statsig/server-core-${{ matrix.config.os }}-${{ matrix.config.arch }}
          platform: linux/${{ matrix.config.docker_arch }}

      - name: Build Package
        shell: bash
        id: build_package
        run: |
          ./tore build ${{ matrix.package }} \
            --os ${{ matrix.config.os }} \
            --arch ${{ matrix.config.arch }} \
            --target ${{ matrix.config.target }} \
            --out-dir build \
            --skip-docker-build \
            --release \
            --sign

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.os }}-${{ matrix.config.target }}-${{ matrix.package }}
          if-no-files-found: error
          path: |
            statsig-pyo3/build/
            statsig-node/build/
            statsig-ffi/include/
            **/release/libstatsig_ffi.so
            **/release/libstatsig_ffi.dylib
            **/release/statsig_ffi.dll
            **/release/libstatsig_ffi.so.sig
            **/release/libstatsig_ffi.dylib.sig
            **/release/statsig_ffi.dll.sig
            **/release/*statsig_ffi.a
            **/release/*statsig_ffi.lib
            **/release/*statsig_ffi.so
            **/release/*statsig_ffi.a.sig
            **/release/*statsig_ffi.lib.sig
            **/release/*statsig_ffi.so.sig
            **/release/libstatsig_elixir*.so

  # -------------------------------------------------------------------- [Verify Node]

  node-verify:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/common-setup

      - uses: actions/download-artifact@v4
        with:
          name: centos7-x86_64-unknown-linux-gnu-node
          path: artifacts

      - name: Setup Statsig Node
        run: |
          cd ./artifacts/statsig-node/build
          ls -al
          pnpm install

      - name: Run Verification
        working-directory: examples/node/verify-package
        env:
          STATSIG_SERVER_SDK_KEY: ${{ secrets.KONG_SERVER_SDK_KEY }}
        run: |
          pnpm init
          pnpm install typescript tsx @types/node
          pnpm install ../../../artifacts/statsig-node/build
          pnpm exec tsx verify.ts

  # -------------------------------------------------------------------- [Verify Python]

  python-verify:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/common-setup

      - uses: actions/download-artifact@v4
        with:
          name: centos7-x86_64-unknown-linux-gnu-python
          path: artifacts

      - name: Setup Statsig Python
        run: |
          cd ./artifacts/statsig-pyo3/build
          pip3 install mypy types-requests *.whl --force-reinstall
          unzip *.whl -d out_dir
          mypy out_dir/statsig_python_core

      - name: Run Verification
        working-directory: examples/python/verify-package
        env:
          STATSIG_SERVER_SDK_KEY: ${{ secrets.KONG_SERVER_SDK_KEY }}
        run: python3 verify.py
          

  # -------------------------------------------------------------------- [Size Report]

  size-report:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/common-setup

      - name: Report Binary Sizes
        shell: bash
        run: |
          ./tore size-report \
            --should-persist ${{ github.event_name == 'release' || github.ref_name == 'main' }} \
            --working-dir artifacts \
            --workflow-id $GITHUB_RUN_ID \
            --repository ${{ github.event.repository.name }} \
            --disregard-workflow-checks

  # -------------------------------------------------------------------- [Publish]

  publish:
    needs: build
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        package:
          - node
          - python
          - java
          - php
          - ffi
          - elixir
          - dotnet

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/common-setup

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Setup elixir
        uses: erlef/setup-beam@v1
        if: ${{  matrix.package == 'elixir' }}
        with:
          elixir-version: 1.18.4
          otp-version: '28.0'


      - name: Setup
        run: |
          pip3 install maturin
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc

      - name: Publish ${{ matrix.package }}
        shell: bash
        run: |
          ./tore publish \
            --package ${{ matrix.package }} \
            --workflow-id $GITHUB_RUN_ID \
            --release-id ${{ github.event.release.id }} \
            --repository ${{ github.event.repository.name }} \
            --disregard-workflow-checks
